plugins {
        id 'java'
        id 'org.springframework.boot' version '2.2.1.RELEASE'
        id 'application'
        id 'jacoco'
        id 'checkstyle'
        id 'distribution'
        //id 'com.github.spotbugs' version '2.0.0'
        id 'org.owasp.dependencycheck' version '5.0.0-M3.1'
        id 'info.solidsoft.pitest' version '1.4.0'
        id 'org.sonarqube' version '2.7.1'
        id 'net.researchgate.release' version '2.8.1'
        id "com.github.ManifestClasspath" version "0.1.0-RELEASE"
        id "org.openapi.generator" version "5.2.0"
        id "com.netflix.dgs.codegen" version "5.0.5"
}

apply plugin: 'io.spring.dependency-management'
apply plugin: 'org.openapi.generator'

version '1.0-SNAPSHOT'

ext.cloudVersion = 'Hoxton.SR11'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = sourceCompatibility

group = 'com.uk.sprint.Rest'

bootJar { enabled = true }
jar {enabled = true}

ext.lombokVersion = '1.18.20'
ext.springFoxVersion = '2.9.2'

application {
    mainClassName = 'com.uk.sprint.Rest.SprintApplication'
}

checkstyle {
    toolVersion = '8.25'
    configDirectory = file("$projectDir/config/checkstyle")
    ignoreFailures = false
}

repositories {
    mavenCentral()
}

task packageDistribution(type: Zip) {
    archiveFileName = "sprint-0.1.zip"
    destinationDirectory = file("$buildDir/dist")

    from "$buildDir/toArchive"
}

task Checkstyle(type: Checkstyle) {
    configFile rootProject.file('config/checkstyle/checkstyle.xml')
    source 'src'
    ignoreFailures false
    showViolations true
    include '**/*.java'
    classpath = files()
}

springBoot {
    mainClassName = 'com.uk.sprint.rest.SprintApplication'
}

test {
    useJUnitPlatform()
}

sourceSets {
   cucumber {
       java {
           compileClasspath += main.output
           runtimeClasspath += main.output
           srcDir file('src/cucumber/java')
       }
       resources.srcDir file('src/cucumber/resources')
   }
}

task cucumberTest(type: Test) {
    testClassesDirs = sourceSets.cucumber.output.classesDirs
    classpath = sourceSets.cucumber.runtimeClasspath
    inputs.dir file('src/cucumber')
    outputs.dir file('build/test-results/cucumberTest')
    dependsOn cucumberClasses
    minHeapSize =  "256m"
    maxHeapSize = "1024m"
}

check.dependsOn tasks.cucumberTest

task openApiGenerator(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = "spring"
    inputSpec = "$rootDir/restController.yaml".toString()
    outputDir = "$buildDir/generated".toString()
    apiPackage = "org.openapi.example.api"
    invokerPackage = "org.openapi.example.invoker"
    modelPackage = "org.openapi.example.model"
    configOptions = [
            dateLibrary: "java8"
    ]
}

compileJava.dependsOn tasks.openApiGenerator

configurations {
    cucumberImplementation.extendsFrom testImplementation
    cucumberRuntimeOnly.extendsFrom testRuntime
    cucumberCompileOnly.extendsFrom testCompileOnly
    cucumberTestAnnounce.extendsFrom testAnnotationProcessor
}

generateJava {
    schemaPaths = ["${projectDir}/src/main/resources/schema"]
    packageName = 'org.ssb.graph.model'
    generateClient = true
}

tasks.withType(Checkstyle) {
    exclude '**/org/**'
}

checkstyleTest.shouldRunAfter(checkstyleMain)
checkstyleCucumber.shouldRunAfter(checkstyleTest)
cucumberTest.shouldRunAfter(test)
bootDistTar.shouldRunAfter(bootJar)
bootJar.shouldRunAfter cucumberTest

dependencies {
    implementation "org.openapitools:openapi-generator-gradle-plugin:5.2.0"
    implementation 'org.projectlombok:lombok:1.18.20'
    implementation "com.netflix.graphql.dgs:graphql-dgs-spring-boot-starter:4.9.0"

    implementation "org.springframework.security:spring-security-config"
    implementation "org.springframework.security:spring-security-web"
    implementation "org.springframework.security:spring-security-ldap"
    implementation "org.springframework.kafka:spring-kafka"
    compileOnly 'org.jetbrains:annotations:22.0.0'
    compile "org.openapitools:jackson-databind-nullable:0.2.1"

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-web
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: '2.2.1.RELEASE'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-jpa
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: '2.5.3'
    // https://mvnrepository.com/artifact/org.springframework.cloud/spring-cloud-config-server
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:${cloudVersion}")
    //database - to add
    //springfox
    implementation "io.springfox:springfox-swagger2:${springFoxVersion}"
    implementation "io.springfox:springfox-swagger-ui:${springFoxVersion}"
    //logging
    implementation 'ch.qos.logback:logback-classic:1.2.6'
    implementation 'org.slf4j:slf4j-api:1.7.32'
    //utility
    implementation 'commons-io:commons-io:2.6'
    implementation 'com.google.guava:guava:31.0.1-jre'
    implementation 'org.apache.httpcomponents:httpclient:4.5.13'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.1'

    compile group: 'com.fasterxml.jackson.core', name: 'jackson-core', version: '2.10.1'

    compile group: 'org.json', name: 'json', version: '20190722'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.1'

    // test compilation dependencies
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    cucumberImplementation "org.projectlombok:lombok:${lombokVersion}"
    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    cucumberCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    cucumberAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"

    testImplementation "org.springframework.boot:spring-boot-starter-test"
    testImplementation 'com.github.tomakehurst:wiremock-standalone:2.27.2'
    testImplementation 'com.github.tomakehurst:wiremock-jre8:2.31.0'
    testImplementation platform('org.junit:junit-bom:5.6.2')
    testImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    testImplementation 'org.awaitility:awaitility:4.1.0'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    testImplementation 'com.h2database:h2:1.4.200'


    // test implementation dependencies
    cucumberImplementation "org.springframework.boot:spring-boot-starter-test"
    cucumberImplementation 'com.github.tomakehurst:wiremock-standalone:2.23.2'
    cucumberImplementation 'com.github.tomakehurst:wiremock-jre8:2.23.2'
    cucumberImplementation platform('org.junit:junit-bom:5.6.2')
    cucumberImplementation 'org.junit.jupiter:junit-jupiter-api'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    cucumberRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
    cucumberImplementation 'org.mockito:mockito-junit-jupiter:3.12.4'
    cucumberImplementation 'io.cucumber:cucumber-java8:6.11.0'
    cucumberImplementation 'io.cucumber:cucumber-junit:6.11.0'
    cucumberImplementation 'io.cucumber:cucumber-spring:6.11.0'
    cucumberImplementation 'org.awaitility:awaitility:4.1.0'
    cucumberImplementation 'io.rest-assured:rest-assured:4.0.0'
    cucumberImplementation 'io.rest-assured:rest-assured-all:4.0.0'
    cucumberImplementation 'io.cucumber:cucumber-junit-platform-engine:6.11.0'
    cucumberImplementation 'org.apache.tomcat:tomcat-servlet-api:10.0.8'
    cucumberImplementation 'com.h2database:h2:1.4.200'
}
